/* #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION */

#include <Python.h>
#include <stddef.h>
#include <quadmath.h>

#include <numpy/arrayobject.h>
#include <numpy/ufuncobject.h>

#include "pyquad.h"
#include "number.h"

PyArray_ArrFuncs NpyQuad_ArrFuncs;

typedef struct { char c; qdouble q; } align_test;

PyArray_Descr npyquad_descr = {
    PyObject_HEAD_INIT(0)
    &PyQuad_Type,       /* typeobj */
    'f',                /* kind */
    'q',                /* type */
    '=',                /* byteorder */
    /*
     * For now, we need NPY_NEEDS_PYAPI in order to make numpy detect our
     * exceptions.  This isn't technically necessary,
     * since we're careful about thread safety, and hopefully future
     * versions of numpy will recognize that.
     */
    NPY_NEEDS_PYAPI | NPY_USE_GETITEM | NPY_USE_SETITEM, /* hasobject */
    0,                      /* type_num */
    sizeof(qdouble),       /* elsize */
    offsetof(align_test, q), /* alignment */
    0,                      /* subarray */
    0,                      /* fields */
    0,                      /* names */
    &NpyQuad_ArrFuncs,  /* f */
    0,                      /* metadata */
    0,
};

static PyObject *
npyquad_getitem(char *data, PyArrayObject *NPY_UNUSED(arr))
{
    qdouble q;

    memcpy(&q, data, sizeof(q));
    return PyQuad_FromQuad(q);
}

static int
npyquad_setitem(PyObject *item, void *data, void *NPY_UNUSED(arr))
{
    qdouble q;

    if (PyQuad_Check(item)) {
        q = ((PyQuad*)item)->obval;
        memcpy(data, &q, sizeof(q));
        return 0;
    } else  {
        PyErr_Format(PyExc_TypeError,
                "%s: expected qdouble, got %s", __func__, item->ob_type->tp_name);
        return -1;
    }
}

static void
byteswap(qdouble* x)
{
    size_t n = sizeof(qdouble), i;
    union swapped {
        qdouble* value;
        char* data;
    } s = {x};
    char tmp;

    for (i = 0; i < n; ++i) {
        tmp = s.data[i];
        s.data[i] = s.data[n - i -1];
        s.data[n - i - 1] = tmp;
    }
}

static void
npyquad_copyswap(void* dst, void* src, int swap, void* NPY_UNUSED(arr))
{
    qdouble *q;

    if (!src) {
        return;
    }
    q = (qdouble*)dst;
    /* FIXME: memmove vs memcpy */
    memmove(q, src, sizeof(*q));
    if (swap) {
        byteswap(q);
    }
}

/**begin repeat
 * #from_type = npy_int8, npy_int16, npy_int32, npy_int64, float, double, long double#
 * #from_type_name = int8, int16, int32, int64, float, double, ldouble#
 * #from_npy_define = NPY_INT8, NPY_INT16, NPY_INT32, NPY_INT64, NPY_FLOAT, NPY_DOUBLE, NPY_LONGDOUBLE#
 */
static void
npycast_@from_type_name@_to_quad(void* from, void* to, npy_intp n, void* NPY_UNUSED(fromarr), void* NPY_UNUSED(toarr))
{
    const @from_type@ *typed_from = (@from_type@*)from;
    qdouble *typed_to = (qdouble*)to;
    npy_intp i;

    for (i = 0; i < n; i++) {
        typed_to[i] = (qdouble)typed_from[i];
    }
}

static int register_@from_type_name@_to_qdouble_cast(int npy_registered_quadnum)
{
    PyArray_Descr* from_descr = PyArray_DescrFromType(@from_npy_define@);
    int safe = 1;

    if (PyArray_RegisterCastFunc(from_descr, npy_registered_quadnum, npycast_@from_type_name@_to_quad) < 0) {
        return -1;
    }
    if (safe && PyArray_RegisterCanCast(from_descr, npy_registered_quadnum, NPY_NOSCALAR) < 0) {
        return -1;
    }

    return 0;
}
/**end repeat**/

/**begin repeat
 * #to_type = npy_int8, npy_int16, npy_int32, npy_int64, float, double, long double#
 * #to_type_name = int8, int16, int32, int64, float, double, ldouble#
 */
static void
npycast_quad_to_@to_type_name@(void* from, void* to, npy_intp n, void* NPY_UNUSED(fromarr), void* NPY_UNUSED(toarr))
{
    const qdouble *typed_from = (qdouble*)from;
    @to_type@ *typed_to = (@to_type@*)to;
    npy_intp i;

    for (i = 0; i < n; i++) {
        typed_to[i] = (@to_type@)typed_from[i];
    }
}

static int register_qdouble_to_@to_type_name@_cast(int npy_registered_quadnum)
{
    PyArray_Descr* from_descr = &npyquad_descr;

    if (PyArray_RegisterCastFunc(from_descr, npy_registered_quadnum, npycast_quad_to_@to_type_name@) < 0) {
        return -1;
    }

    return 0;
}
/**end repeat**/

static int register_cast_functions(int npy_registered_quadnum)
{
/**begin repeat
 * #to_type_name = int8, int16, int32, int64, float, double, ldouble#
 */
    if(register_@to_type_name@_to_qdouble_cast(npy_registered_quadnum) < 0) {
        return -1;
    }
    if(register_qdouble_to_@to_type_name@_cast(npy_registered_quadnum) < 0) {
        return -1;
    }
/**end repeat**/
    return 0;
}

void
init_quad_descriptor(PyObject* np_module)
{
    int npy_registered_quadnum;

    PyArray_InitArrFuncs(&NpyQuad_ArrFuncs);
    NpyQuad_ArrFuncs.getitem = (PyArray_GetItemFunc*)npyquad_getitem;
    NpyQuad_ArrFuncs.setitem = (PyArray_SetItemFunc*)npyquad_setitem;
    NpyQuad_ArrFuncs.copyswap = (PyArray_CopySwapFunc*)npyquad_copyswap;

    npyquad_descr.ob_type = &PyArrayDescr_Type;
    npy_registered_quadnum = PyArray_RegisterDataType(&npyquad_descr);
    if (npy_registered_quadnum < 0) {
        return;
    }

    /* Support dtype(qdouble) syntax */
    if (PyDict_SetItemString(PyQuad_Type.tp_dict, "dtype",
			     (PyObject*)&npyquad_descr) < 0) {
        return;
    }

    if (register_cast_functions(npy_registered_quadnum) < 0) {
        return;
    }
}


/*
 * Module initialization boilerplate
 */
static PyMethodDef ModuleMethods[] = {
    {NULL, NULL, 0, NULL}
};


PyMODINIT_FUNC init_quad(void)
{
    PyObject *m;
    PyObject *np_module;
    PyObject *s;

    import_array();
    if (PyErr_Occurred()) {
        return;
    }
    import_umath();
    if (PyErr_Occurred()) {
        return;
    }

    s = PyString_FromString("numpy");
    if (!s) {
        return;
    }
    np_module = PyImport_Import(s);
    Py_DECREF(s);

    m = Py_InitModule("_quad", ModuleMethods);
    if (m == NULL) {
        return;
    }
    init_quad_type(m, &PyGenericArrType_Type);

    init_quad_descriptor(np_module);
}
